#!/usr/bin/env tclsh

source ./csv/hashdeep-csv.tcl

if {[llength $argv] != 2} {
	puts "usage: hashdeep-compare <file-one> <file-two>"
	exit 1;
}
puts stderr "comparing: $argv"

set firstFile [lindex $argv 0]
set secondFile [lindex $argv 1]

set fp [open $firstFile r]
set firstLines [read $fp]
close $fp

set fp [open $secondFile r]
set secondLines [read $fp]
close $fp

if {[catch {::hashdeepCsv::parseCsv $firstLines} indexOne options]} {
	puts "CAUGHT: $options"
	exit 1;
}
if {[catch {::hashdeepCsv::parseCsv $secondLines} indexTwo options]} {
	puts "CAUGHT: $options"
	exit 1;
}

#puts "Name of hash (file1) is: [dict get [dict get $indexOne 89b337fd82777c2efdaabb11594d4dd5] filename]"

proc shouldIncludeFile {filename} {
	foreach excludeDir [list {.cache} {.gimp-2.8} {.config} {.dropbox-dist} {.thunderbird} {.vim} {.npm}\
			{.thumbnails} {.git} {.macromedia} {.mozilla} {.gnome} {.local} {node_modules} {StockStack} {nupic}] {
		if {[string match "*/$excludeDir/*" $filename]} {
			return false
		}
	}
	return true
}

foreach hash [dict keys $indexTwo] {
	#puts "looking for $hash"
	set fileMetadata [dict get $indexTwo $hash]
	#puts "metadata| $fileMetadata"
	set filename [dict get $fileMetadata filename]
	if {[shouldIncludeFile $filename]} {
		if {![dict exists $indexOne $hash]} {
			puts "only in file 2: $hash ($filename)"
		}
	}
}
