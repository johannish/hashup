#!/usr/bin/env tclsh

source ./csv/hashdeep-csv.tcl

if {[llength $argv] < 2} {
	puts "usage: hashdeep-compare <file-one> <file-two> \[<copy-dir>]"
	exit 1;
}
set firstFile [lindex $argv 0]
set secondFile [lindex $argv 1]
set copyDir {}
if {[llength $argv] == 3} {
	set copyDir [lindex $argv 2]
}

puts stderr "comparing: $argv"

set fp [open $firstFile r]
set firstLines [read $fp]
close $fp

set fp [open $secondFile r]
set secondLines [read $fp]
close $fp

if {[catch {::hashdeepCsv::parseCsv $firstLines} indexOne options]} {
	puts "CAUGHT: [dict get $options -errorinfo]"
	exit 1;
}
if {[catch {::hashdeepCsv::parseCsv $secondLines} indexTwo options]} {
	puts "CAUGHT: [dict get $options -errorinfo]"
	exit 1;
}

#puts "Name of hash (file1) is: [dict get [dict get $indexOne 89b337fd82777c2efdaabb11594d4dd5] filename]"

proc shouldIncludeFile {filepath} {
	foreach excludeDir [list {.cache} {.gimp-2.8} {.config} {.dropbox-dist} {.thunderbird} {.vim} {.npm}\
			{.thumbnails} {.git} {.macromedia} {.mozilla} {.gnome} {.local} {node_modules} {StockStack} {nupic}] {
		if {[string match "*/$excludeDir/*" $filepath]} {
			return false
		}
	}
	return true
}

foreach hash [dict keys $indexTwo] {
	#puts "looking for $hash"
	set fileMetadata [dict get $indexTwo $hash]
	#puts "metadata| $fileMetadata"
	set filepath [dict get $fileMetadata filepath]
	set filename [dict get $fileMetadata filename]
	set relativeDir [dict get $fileMetadata relativeDir]
	if {[shouldIncludeFile $filepath]} {
		if {![dict exists $indexOne $hash]} {
			puts "only in file 2: $hash ($filepath)"
			if {[string length $copyDir] > 0} {
				set copyDirs [file join $copyDir $relativeDir]
				#puts "WOULD CREATE: $copyDirs"
				exec mkdir -p $copyDirs
				set copyPath [file join $copyDirs $filename]
				#puts "WOULD COPY: $filename $copyPath"
				exec cp $filepath $copyPath
			}
		}
	}
}
